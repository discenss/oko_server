import telebot
from telebot import types
from datetime import datetime
from oko_db.db import DB
from telebot.types import LabeledPrice, ShippingOption
import time


def read_bot_keys(file_path):
    with open(file_path, 'r') as file:
        first_line = file.readline().rstrip()
        second_line = file.readline().rstrip()

    return first_line, second_line

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
file_path = 'file.txt'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
bot_id, payment_token = read_bot_keys(file_path)
bot = telebot.TeleBot(bot_id)

report_for_date = '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 1991-08-24)'
report_for_date_or_exit = "–í–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 1991-08-24) –∏–ª–∏ /menu –¥–ª—è –≤–∏—Ö–æ–¥—É"
est_name_and_password_for_subsc = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É_–∑–∞–∫–ª–∞–¥—É —Ç–∞ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n MyBar MyPassword"
top_up_account = "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è"

def send_bot_message(message, tg_id):
    bot.send_message(tg_id, message)

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(query):
    bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    db = DB()
    db.addmomey_for_tg_user(message.from_user.id, message.successful_payment.total_amount / 100)
    bot.reply_to(message, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–∏–ª–∏ —Ä–∞—Ö—É–Ω–æ–∫. –ë–∞–ª–∞–Ω—Å %s" % db.get_money_for_tg_user(message.from_user.id))
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ—ñ–ª—å')
    btn2 = types.KeyboardButton('–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –¥–∞—Ç—É')
    btn3 = types.KeyboardButton('–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç')
    btn4 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç–∏ –¥–æ —Å–µ—Ä–≤—ñ—Å—É')
    btn5 = types.KeyboardButton('–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫')

    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ—á–∞—Ç–∏")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è —Ä–æ–±–æ—Ç—ã —Å –≤—ñ–¥–µ–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º. \n"
                                           "/start - –ø–æ—á–∞—Ç–∏ —Å –ø–æ—á–∞—Ç–∫—É\n"
                                           "–Ø–∫—â–æ –≤–∏ —Ç—ñ–ª—å–∫–∏ —Ä–æ–∑–ø–æ—á–∞–ª–∏ —Ä–æ–±–æ—Ç—É —Å –±–æ—Ç–æ–º —Ç–æ –í–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –º–∞—Ç–∏ '–ù–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É' —Ç–∞ '–ü–∞—Ä–æ–ª—å'. –¶—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —É –≤–ª–∞—Å–Ω–∏–∫–∞ –∑–∞–∫–ª–∞–¥—É.\n "
                                           "–ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ - –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–µ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç\n"
                                           "/menu - –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é ", reply_markup=markup)

@bot.message_handler(commands=['menu'])
def start(message):

    show_main_menu(message)

@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          (message.reply_to_message.text == report_for_date or
                                            message.reply_to_message.text ==  report_for_date_or_exit))

@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          message.reply_to_message.text == est_name_and_password_for_subsc)

@bot.message_handler(func=lambda message: message.reply_to_message is not None and
                                          message.reply_to_message.text == top_up_account)

def handle_reply(message):
    if message.reply_to_message.text == report_for_date or message.reply_to_message.text == report_for_date_or_exit:
        try:
            date = datetime.strptime(message.text, '%Y-%m-%d')
            bot.reply_to(message, f'–í–∏ –≤–≤–µ–ª–∏ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: {date}')
            bot.reply_to(message, f'–ô–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞')
            bot.reply_to(message, f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞')
            show_main_menu(message)

        except ValueError:
            bot.reply_to(message, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.')
            markup = types.ForceReply(selective=False)
            bot.send_message(message.from_user.id, report_for_date_or_exit, reply_markup=markup)

    elif message.reply_to_message.text == est_name_and_password_for_subsc:
        if(len(message.text.split(' ')) ==2):
            name, passw = message.text.split(' ')
            bot.reply_to(message, f'–í–∏ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É: {name}\n–ü–∞—Ä–æ–ª—å: {passw}')
            db = DB()
            res = db.subscribe_user_to_est(message.from_user.id, name, passw)
            if (res == 'success'):
                markup = types.ForceReply(selective=False)
                bot.send_message(message.from_user.id, f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –∑–≤—ñ—Ç. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–≤—ñ—Ç—É', reply_markup=markup)
            else:
                markup = types.ForceReply(selective=False)
                bot.send_message(message.from_user.id, res, reply_markup=markup)

            show_main_menu(message)
        else:
            bot.reply_to(message, f'–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤—É_–∑–∞–∫–ª–∞–¥—É —ñ –ø–∞—Ä–æ–ª—å')
            show_main_menu(message)
    elif message.reply_to_message.text == top_up_account:
        try:
            val = int(message.text)
            prices = [LabeledPrice(label='Product', amount=val * 100)]
            bot.send_invoice(
                chat_id=message.chat.id,
                title="OKO AI",
                description="–í—ñ–¥–µ–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É",
                provider_token=payment_token,  # Get this from your payment provider setup
                currency="UAH",
                is_flexible=False,  # True If you want to send a flexible invoice
                prices=prices,
                start_parameter="start_param",
                invoice_payload="payload"
            )
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')

            markup.add(btn1)
            bot.send_message(message.from_user.id, '–ê–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', reply_markup=markup)
        except ValueError:
            bot.reply_to(message, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞')
            markup = types.ForceReply(selective=False)
            bot.send_message(message.from_user.id, top_up_account, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'üëã –ü–æ—á–∞—Ç–∏':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, est_name_and_password_for_subsc, reply_markup=markup)
    elif message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        show_main_menu(message)

    elif message.text == '–ü—Ä–æ—Ñ—ñ–ª—å':
        db = DB()
        est_subs = db.get_est_list_for_tg_user(message.from_user.id)
        if est_subs is None:
            messg = '–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∂–æ–¥–µ–Ω –∑–∞–∫–ª–∞–¥\n'
        else:
            ests = ' '.join(est_subs)
            messg = '–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∑–∞–∫–ª–∞–¥–∏: ' + ests

        est_subs = db.get_est_name_by_owner_id(message.from_user.id)

        if est_subs is None:
            messg += " \n–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–ª–∞—Å–Ω–∏–∫ –∑–∞–∫–ª–∞–¥—É"
        else:
            ests = ' '.join(est_subs)
            messg =  messg + '\n–í–∏ –∑–∞—Ä–µ—î—Å—Ä–æ–≤–∞–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫–æ–º: ' + ests

        messg = messg + f"\n–£ –≤–∞—Å –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É {db.get_money_for_tg_user(message.from_user.id)} UAH"

        bot.send_message(message.from_user.id,
                         messg,
                         parse_mode='Markdown')

    elif message.text == '–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –¥–∞—Ç—É':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, report_for_date, reply_markup=markup)

    elif message.text == '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, est_name_and_password_for_subsc, reply_markup=markup)

    elif message.text == '–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–∫–ª–∞–¥':
        markup = types.ForceReply(selective=False)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–∞—Ä–æ–ª—å",
                         reply_markup=markup)

    elif message.text == "–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫":
        markup = types.ForceReply(selective=False)
        db = DB()
        bot.send_message(message.from_user.id, top_up_account, reply_markup=markup)
        #markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        #btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')

        #markup.add(btn1)
        #bot.send_message(message.from_user.id, '–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', reply_markup=markup)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except ConnectionError as e:
            print("Connection error, retrying...", e)
            time.sleep(15)